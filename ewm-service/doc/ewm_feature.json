{
  "openapi": "3.0.0",
  "info": {
    "title": "Follow friend feature",
    "description": "Documentation for \"Follow friends\" feature at \"Explore With Me\" API version 1.0",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "defaultContentType": "application/json",
   "tags": [
    {
      "description": "Приватный API для работы с запросами на дружбу",
      "name": "Private Friendship API: Запрос на дружбу"
    },
    {
      "description": "Приватный API для работы с друзьями",
      "name": "Private Friends API: Друзья"
    },
    {
      "description": "Приватный API для работы с запросами на участии в событиях",
      "name": "Private Request API: Запросы на участие в событиях"
    },
    {
      "description": "Приватный API для работы с пользователями",
      "name": "Private User API: Пользователи"
    }
  ],
  "paths": {
    "/users/{userId}/requsts/hide": {
      "patch": {
        "summary": "Скрыть события от друзей",
        "description": "- Изменить видимость можно только у подтвержденных запросов на участие - Изменять можно видимость событий в которых участвует текущий пользователь",
        "operationId": "hideParticipation",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "массив id событий",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipationRequestDto"
                  }
                }
              }
            },
            "description": "События скрыты от друзей/показаны друзьям"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Failed to convert value of type java.lang.String to required type int; nested exception is java.lang.NumberFormatException: For input string: ad",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Нарушение целостности данных"
          }
        },
        "tags": [
           "Private Request API: Запросы на участие в событиях"
        ]
      }
    },
    "/users/{userId}/requsts/show": {
      "patch": {
        "summary": "Скрыть события от друзей",
        "description": "- Изменить видимость можно только у подтвержденных запросов на участие - Изменять можно видимость событий в которых участвует текущий пользователь",
        "operationId": "showParticipation",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "массив id событий",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipationRequestDto"
                  }
                }
              }
            },
            "description": "События скрыты от друзей/показаны друзьям"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Failed to convert value of type java.lang.String to required type int; nested exception is java.lang.NumberFormatException: For input string: ad",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Нарушение целостности данных"
          }
        },
        "tags": [
           "Private Request API: Запросы на участие в событиях"
        ]
      }
    },
    "/users/{userId}/subs": {
      "patch": {
        "summary": "Изменить режим подписки",
        "description": "- Изменять режим можно только у себя",
        "operationId": "changeSubscribeMode",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "режим подписки(true - автоматическое принятие запроса на подписку)",
            "in": "query",
            "name": "auto",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Режим подписки изменен"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Failed to convert value of type java.lang.String to required type int; nested exception is java.lang.NumberFormatException: For input string: ad",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Нарушение целостности данных"
          }
        },
        "tags": [
          "Private User API: Пользователи"
        ]
      }
    },
    "/users/{userId}/friendships/{friendId}": {
      "post": {
        "summary": "Добавление запроса на дружбу от текущего пользователя",
        "description": "Примечание: \n  - дружба не взаимная\n  - нельзя добавить повторный запрос если текущий статус PENDING или APPROVED (Ожидается код ошибки 409) \n  - нельзя подписаться на самого себя (Ожидается код ошибки 409) \n  - если для пользователя отключена пре-модерация запросов на дружбу, то запрос должен автоматически перейти в состояние подтвержденного",
        "operationId": "requestFriendship",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id друга",
            "in": "path",
            "name": "friendId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendshipDto"
                }
              }
            },
            "description": "Заявка заявка на дружбу создана"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Failed to convert value of type java.lang.String to required type int; nested exception is java.lang.NumberFormatException: For input string: ad",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступн"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Нарушение целостности данных"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friendships/{subsId}": {
      "delete": {
        "summary": "Удалить запрос на дружбу от текущего пользователя",
        "operationId": "deleteFriendshipRequest",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id запроса на дружбу",
            "in": "path",
            "name": "subsId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Удвление из друзей"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступн"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Нарушение целостности данных"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friendships/approve": {
      "patch": {
        "summary": "Подтверждение полученых запросов на дружбу текущим пользователем",
        "description": "- Подтвердить можно только запросы в ожидании(Ожидается код ошибки 409)",
        "operationId": "approveFriendship",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "description": "список идентификаторов запросов на дружбу",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "array",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "default": [
                1,
                2
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Запросы обновлены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friendships/reject": {
      "patch": {
        "summary": "Отклонение запросов на дружбу полученых текущи пользователем",
        "description": "- Отклонить можно только запросы в состоянии PENDING или APPROVED (Ожидается код ошибки 409)",
        "operationId": "rejectFriendship",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "description": "список идентификаторов запросов на дружбу",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "array",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "default": [
                1,
                2
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Запросы обновлены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friendships/requests": {
      "get": {
        "summary": "Получить список заявок на дружбу, отправленных текущим пользователем",
        "description": "В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getFriendshipRequests",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "description": "filter",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "ALL",
                "APPROVED",
                "PENDING",
                "REJECTED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendshipDto"
                  }
                }
              }
            },
            "description": "Запросы найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friendships/followers": {
      "get": {
        "summary": "Получить список заявок на дружбу, полученных текущим пользователем",
        "description": "В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getIncomingFriendshipRequests",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "description": "filter",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "ALL",
                "APPROVED",
                "PENDING",
                "REJECTED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendshipDto"
                  }
                }
              }
            },
            "description": "Запросы найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friendship API: Запрос на дружбу"
        ]
      }
    },
    "/users/{userId}/friends": {
      "get": {
        "summary": "Получить список друзей текущего пользователя",
        "description": "- заявки в статусе APPROVE В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getFriends",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Запросы найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friends API: Друзья"
        ]
      }
    },
    "/users/{userId}/followers": {
      "get": {
        "summary": "Получить список подписчиков текущего пользователя",
        "description": "- заявки в статусе APPROVE В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getfollowers",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Запросы найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден или недоступен"
          }
        },
        "tags": [
          "Private Friends API: Друзья"
        ]
      }
    },
    "/users/{userId}/friends/events": {
      "get": {
        "summary": "Получить список событий опубликованных друзьями текущего пользователя",
        "description": "- событие время которого начинается не ранее чем через 2 часа после текущего момета\n\n  В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getFriendEvents",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество элементов в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "События найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Compilation with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Подборка не найдена или недоступна"
          }
        },
        "tags": [
          "Private Friends API: Друзья"
        ]
      }
    },
    "/users/{userId}/friends/share": {
      "get": {
        "summary": "Получиние события в которых будут учавствовать друзья текущего пользователя",
        "description": "- событие дата которого начинается не ранее чем через 2 часа после текущего момета\n\n  В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список",
        "operationId": "getParticipateEvents",
        "parameters": [
          {
            "description": "id текущего пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество элементов в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "События найдены"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Compilation with id=11 was not found",
                  "timestamp": "2022-09-07 09:10:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Подборка не найдена или недоступна"
          }
        },
        "tags": [
          "Private Friends API: Друзья"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "FriendshipShortDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор запроса на подписку",
            "format": "int64",
            "example": 1
          },
          "frieand": {
            "$ref": "#/components/schemas/UserShortDto"
          }
        },
        "description": "Друзья"
      },
      "FriendshipDto": {
        "required": [
          "followerId",
          "frieand",
          "status"
        ],
        "type": "object",
        "properties": {
          "followerId": {
            "type": "integer",
            "description": "Идентификатор пользователя",
            "format": "int64",
            "example": 1
          },
          "frieand": {
            "$ref": "#/components/schemas/UserShortDto"
          },
          "status": {
            "type": "string",
            "description": "Список статусов дружбы",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "APPROOVED",
              "CANCELED"
            ]
          }
        },
        "description": "Друзья"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Список стектрейсов или описания ошибок",
            "example": [],
            "items": {
              "type": "string",
              "description": "Список стектрейсов или описания ошибок",
              "example": "[]"
            }
          },
          "message": {
            "type": "string",
            "description": "Сообщение об ошибке",
            "example": "Only pending or canceled events can be changed"
          },
          "reason": {
            "type": "string",
            "description": "Общее описание причины ошибки",
            "example": "For the requested operation the conditions are not met."
          },
          "status": {
            "type": "string",
            "description": "Код статуса HTTP-ответа",
            "example": "FORBIDDEN",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "Дата и время когда произошла ошибка (в формате \"yyyy-MM-dd HH:mm:ss\")",
            "example": "2022-06-09 06:27:23"
          }
        },
        "description": "Сведения об ошибке"
      },
      "CategoryDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор категории",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Название категории",
            "example": "Концерты"
          }
        },
        "description": "Категория"
      },
      "EventShortDto": {
        "required": [
          "annotation",
          "category",
          "eventDate",
          "initiator",
          "paid",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "initiator": {
            "$ref": "#/components/schemas/UserShortDto"
          },
          "title": {
            "type": "string",
            "description": "Заголовок",
            "example": "Знаменитое шоу 'Летающая кукуруза'"
          },
          "annotation": {
            "type": "string",
            "description": "Краткое описание",
            "example": "Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDto"
          },
          "confirmedRequests": {
            "type": "integer",
            "description": "Количество одобренных заявок на участие в данном событии",
            "format": "int64",
            "example": 5
          },
          "eventDate": {
            "type": "string",
            "description": "Дата и время на которые намечено событие (в формате \"yyyy-MM-dd HH:mm:ss\")",
            "example": "2024-12-31 15:10:05"
          },
          "paid": {
            "type": "boolean",
            "description": "Нужно ли оплачивать участие",
            "example": true
          },
          "views": {
            "type": "integer",
            "description": "Количество просмотрев события",
            "format": "int64",
            "example": 999
          }
        },
        "description": "Краткая информация о событии",
        "example": [
          {
            "annotation": "Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории",
            "category": {
              "id": 1,
              "name": "Концерты"
            },
            "confirmedRequests": 5,
            "eventDate": "2024-03-10 14:30:00",
            "id": 1,
            "initiator": {
              "id": 3,
              "name": "Фёдоров Матвей"
            },
            "paid": true,
            "title": "Знаменитое шоу 'Летающая кукуруза'",
            "views": 999
          },
          {
            "annotation": "За почти три десятилетия группа 'Java Core' закрепились на сцене как группа, объединяющая поколения.",
            "category": {
              "id": 1,
              "name": "Концерты"
            },
            "confirmedRequests": 555,
            "eventDate": "2025-09-13 21:00:00",
            "id": 1,
            "initiator": {
              "id": 3,
              "name": "Паша Петров"
            },
            "paid": true,
            "title": "Концерт рок-группы 'Java Core'",
            "views": 991
          }
        ]
      },
      "UserDto": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Имя",
            "example": "Петров Иван"
          },
          "email": {
            "type": "string",
            "description": "Почтовый адрес",
            "example": "petrov.i@practicummail.ru"
          },
          "autoSubscribe": {
            "type": "boolean",
            "description": "режим подтверждения дружбы(true - автоматически принимать запросы на дружбу)",
            "default": false
          }
        },
        "description": "Пользователь"
      },
      "UserShortDto": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "Имя",
            "example": "Фёдоров Матвей"
          }
        },
        "description": "Пользователь (краткая информация)"
      },
      "ParticipationRequestDto": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "Дата и время создания заявки",
            "example": "2022-09-06T21:10:05.432"
          },
          "event": {
            "type": "integer",
            "description": "Идентификатор события",
            "format": "int64",
            "example": 1
          },
          "id": {
            "type": "integer",
            "description": "Идентификатор заявки",
            "format": "int64",
            "example": 3
          },
          "requester": {
            "type": "integer",
            "description": "Идентификатор пользователя, отправившего заявку",
            "format": "int64",
            "example": 2
          },
          "status": {
            "type": "string",
            "description": "Статус заявки",
            "example": "PENDING"
          },
          "isPrivate": {
            "type": "boolean",
            "deacription": "Видимость для друзей",
            "default": true,
            "exemple": true
          }
        },
        "description": "Заявка на участие в событии"
      }
    }
  }
}