{
	"info": {
		"_postman_id": "6acf7713-4d8b-479a-9c99-fb79f2904f64",
		"name": "Feature \"Subscription - Follow friends\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25439441"
	},
	"item": [
		{
			"name": "404",
			"item": [
				{
					"name": "Добавление нового запроса на дружбу(на себя) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\",user.id);\r",
									"        pm.collectionVariables.set(\"fid\", 9999);\r",
									"        \r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":friendId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "friendId",
									"value": "{{fid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Отклонение запроса (неправильный набор id запросов)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const friend1 = await api.addUser(rnd.getUser());\r",
									"                \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"ids\", [995,999]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/reject?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"reject"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Подтверждение запроса на дружбу - когда запросы не найдены",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"        const app1 = await api.approveSub(friend.id, [sub.id]);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [998, 999]);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/approve?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"approve"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "4️0️9️",
			"item": [
				{
					"name": "Добавление нового запроса на дружбу(на себя)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"fid\", user.id);\r",
									"        \r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":friendId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "friendId",
									"value": "{{fid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление повторного запроса на дружбу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const s = await api.addSub(user.id,friend.id);\r",
									"        const app1 = await api.approveSub(friend.id, [s.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"fid\", friend.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":friendId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "friendId",
									"value": "{{fid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Изменить видимость участи в событии, когда не участвует в собитии",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = false\r",
									"\r",
									"        let event1 = await api.addEvent(user.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = false\r",
									"        let event2 = await api.addEvent(user.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let eventBody3 = rnd.getEvent(category.id);\r",
									"        eventBody3['requestModeration'] = false\r",
									"        let event3 = await api.addEvent(user.id, eventBody3);\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user2.id);\r",
									"        const requestToJoin3 = await api.publishParticipationRequest(event2.id, user2.id);\r",
									"        const requestToJoin2 = await api.publishParticipationRequest(event3.id, user2.id);\r",
									"        //await api.acceptParticipationRequest(event1.id,user.id,requestToJoin1.id);\r",
									"        //await api.acceptParticipationRequest(event2.id,user.id,requestToJoin3.id);\r",
									"        //await api.acceptParticipationRequest(event3.id,user.id,requestToJoin2.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"ids\", [requestToJoin1.id,requestToJoin3.id]);\r",
									"        pm.collectionVariables.set('response', [requestToJoin1,requestToJoin3]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/requests/hide/?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								"hide",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Изменить видимость участия в событие, когда участи не подтверждено",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = true\r",
									"        let event2 = await api.addEvent(user.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let eventBody3 = rnd.getEvent(category.id);\r",
									"        eventBody3['requestModeration'] = true\r",
									"        let event3 = await api.addEvent(user.id, eventBody3);\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user2.id);\r",
									"        const requestToJoin3 = await api.publishParticipationRequest(event2.id, user2.id);\r",
									"         \r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"ids\", [requestToJoin1.id,requestToJoin3.id]);\r",
									"        pm.collectionVariables.set('response', [requestToJoin1,requestToJoin3]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/requests/hide/?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								"hide",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Подтверждение запроса на дружбу - когда запросы чужие",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const friend1 = await api.addUser(rnd.getUser());\r",
									"        const sub1 = await api.addSub(user1.id,friend1.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", sub1.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/approve?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"approve"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Отклонение запроса на дружбу - когда запрос чужой",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(friend.id,user.id);\r",
									"\r",
									"        const friend1 = await api.addUser(rnd.getUser());\r",
									"        const sub1 = await api.addSub(user.id,friend1.id);\r",
									"                \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id,sub1.id]);\r",
									"        pm.collectionVariables.set('response', sub);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/reject?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"reject"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Подтверждение запроса на дружбу когда статус not PENDING",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"        const app1 = await api.approveSub(friend.id, [sub.id]);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id]);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/approve?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"approve"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Отклонение запроса на дружбу когда запрос уже отклонен",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"        const app1 = await api.rejectSub(friend.id, [sub.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id]);\r",
									"        pm.collectionVariables.set('response', sub);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/reject?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"reject"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "Request",
			"item": [
				{
					"name": "Скрыть события от друзей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = true\r",
									"        let event2 = await api.addEvent(user.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let eventBody3 = rnd.getEvent(category.id);\r",
									"        eventBody3['requestModeration'] = true\r",
									"        let event3 = await api.addEvent(user.id, eventBody3);\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user2.id);\r",
									"        const requestToJoin3 = await api.publishParticipationRequest(event2.id, user2.id);\r",
									"        const requestToJoin2 = await api.publishParticipationRequest(event3.id, user2.id);\r",
									"        await api.acceptParticipationRequest(event1.id,user.id,requestToJoin1.id);\r",
									"        await api.acceptParticipationRequest(event2.id,user.id,requestToJoin3.id);\r",
									"        await api.acceptParticipationRequest(event3.id,user.id,requestToJoin2.id);\r",
									"        \r",
									"\r",
									"                \r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"ids\", [requestToJoin1.id,requestToJoin3.id]);\r",
									"        pm.collectionVariables.set('response', [requestToJoin1,requestToJoin3]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"В запросе на участие значения private должено быть true после выполнения запроса\", function () {\r",
									"    pm.expect(source[0].private).equal(false);\r",
									"    pm.expect(source[1].private).equal(false);\r",
									"    pm.expect(target[0].private).equal(true);\r",
									"    pm.expect(target[1].private).equal(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/requests/hide/?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								"hide",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Показать события фоловерам",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = false\r",
									"        let event1 = await api.addEvent(user.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = false\r",
									"        let event2 = await api.addEvent(user.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let eventBody3 = rnd.getEvent(category.id);\r",
									"        eventBody3['requestModeration'] = false\r",
									"        let event3 = await api.addEvent(user.id, eventBody3);\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"       \r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user2.id);\r",
									"        const requestToJoin3 = await api.publishParticipationRequest(event2.id, user2.id);\r",
									"        const requestToJoin2 = await api.publishParticipationRequest(event3.id, user2.id);\r",
									"\r",
									"        h = await api.hideEvent(user2.id,[requestToJoin1.id,requestToJoin3.id,requestToJoin2.id]);\r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        pm.collectionVariables.set(\"ids\", [requestToJoin1.id, requestToJoin3.id]);\r",
									"        \r",
									"        pm.collectionVariables.set('response', h);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"В запросе на участие значения private должено быть false после выполнения запроса\", function () {\r",
									"    pm.expect(source[0].private).equal(true);\r",
									"    pm.expect(source[1].private).equal(true);\r",
									"    pm.expect(target[0].private).equal(false);\r",
									"    pm.expect(target[1].private).equal(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/requests/show/?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								"show",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Установить режим автоматической подписки на пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"       \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", user);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Признак подписки должно соответствовать true после выполнения запроса\", function () {\r",
									"    pm.expect(source.isAutoSubscribe).equal(false);\r",
									"    pm.expect(target.isAutoSubscribe).equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subs?auto=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subs"
							],
							"query": [
								{
									"key": "auto",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключить режим автоматической подписки на пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        let user = await api.addUser(rnd.getUser());\r",
									"        user1 = await api.changeSubsMode(user.id, true);\r",
									"       \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", user1);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Признак подписки должно соответствовать false после выполнения запроса\", function () {\r",
									"    pm.expect(source.isAutoSubscribe).equal(true);\r",
									"    pm.expect(target.isAutoSubscribe).equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subs?auto=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subs"
							],
							"query": [
								{
									"key": "auto",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Запрос на дружбу",
			"item": [
				{
					"name": "Добавление нового запроса на дружбу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"sub\", friend.id);\r",
									"        pm.collectionVariables.set(\"response\", friend);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, followerId, friend, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('followerId');\r",
									"pm.expect(target).to.have.property('friend');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.followerId).equal(userId, 'followerId должно соответствовать id текущего пользователя');\r",
									"    pm.expect(target.friend.id).equal(source.id, 'id должно соответствовать id пользователя которому отправлен запрос на дружбу');\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно иметь статус PENDING\", function () {\r",
									"    pm.expect(target.state).equal(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":friendId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "friendId",
									"value": "{{sub}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового запроса на дружбу пользователю с автоподпиской",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        u = await api.changeSubsMode(friend.id, true);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"sub\", friend.id);\r",
									"        pm.collectionVariables.set(\"response\", friend);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, followerId, friend, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('followerId');\r",
									"pm.expect(target).to.have.property('friend');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.followerId).equal(userId, 'followerId должно соответствовать id текущего пользователя');\r",
									"    pm.expect(target.friend.id).equal(source.id, 'friend.id должнО соответствовать id пользователя которому отправлен запрос на дружбу');\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно иметь статус APPROVED\", function () {\r",
									"    pm.expect(target.state).equal(\"APPROVED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":friendId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "friendId",
									"value": "{{sub}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Подтверждение запроса на дружбу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const sub1 = await api.addSub(user1.id,friend.id);\r",
									"                \r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id,sub1.id]);\r",
									"        pm.collectionVariables.set('response1', friend);\r",
									"        console.log(sub.status,sub1.status);\r",
									"        pm.collectionVariables.set('response2', [sub,sub1]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = pm.collectionVariables.get(\"response1\");\r",
									"const subs_source = pm.collectionVariables.get(\"response2\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(2);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"\r",
									"    pm.expect(target[0].id).equal(subs_source[0].id, 'Id пользователя должно соответствовать id пользователя с указанным идентификатором');\r",
									"});\r",
									"pm.test(\"Статус запроса на дружбу должен быть: PENDING - до выполение запроса, APPROVED - после выполнения запроса\", function() {\r",
									"    pm.expect(subs_source[0].state).to.be.equal(\"PENDING\");\r",
									"    pm.expect(subs_source[1].state).to.be.equal(\"PENDING\");\r",
									"    pm.expect(target[0].state).to.be.equal(\"APPROVED\");\r",
									"    pm.expect(target[1].state).to.be.equal(\"APPROVED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/approve?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"approve"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Отклонение запроса на  дружбу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        const sub = await api.addSub(user.id,friend.id);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id]);\r",
									"        pm.collectionVariables.set(\"response\", [sub]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"\r",
									"    pm.expect(target[0].id).equal(subs_source[0].id, 'Id пользователя должно соответствовать id пользователя с указанным идентификатором');\r",
									"});\r",
									"pm.test(\"Статус запроса на дружбу должен быть: PENDING - до выполение запроса, REJECTED - после выполнения запроса\", function() {\r",
									"    pm.expect(subs_source[0].state).to.be.equal(\"PENDING\");\r",
									"    pm.expect(target[0].state).to.be.equal(\"REJECTED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/reject?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"reject"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление запроса на дружбу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let sub;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        const s = await api.addSub(user.id, friend.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"sub\", s.id);\r",
									"               \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/:subsId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								":subsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "subsId",
									"value": "{{sub}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Отклонение запроса на дружбу когда запрос уже подтвержден",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const friend = await api.addUser(rnd.getUser());\r",
									"        f1 = await api.changeSubsMode(friend.id, true);\r",
									"        const sub = await api.addSub(user.id, friend.id);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", friend.id);\r",
									"        pm.collectionVariables.set(\"ids\", [sub.id]);\r",
									"        console.log(sub);\r",
									"        pm.collectionVariables.set(\"response\", [sub]);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"\r",
									"    pm.expect(target[0].id).equal(subs_source[0].id, 'Id пользователя должно соответствовать id пользователя с указанным идентификатором');\r",
									"});\r",
									"pm.test(\"Статус запроса на дружбу должен быть: APPROVED - до выполение запроса, REJECTED после выполнения запроса\", function() {\r",
									"    pm.expect(subs_source[0].state).to.be.equal(\"APPROVED\");\r",
									"    pm.expect(target[0].state).to.be.equal(\"REJECTED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/reject?ids={{ids}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"reject"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "Подписки",
			"item": [
				{
					"name": "Получение пользователем списка поданных им заявок на дружбу - ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user.id,user1.id);\r",
									"        const sub2 = await api.addSub(user.id,user2.id);\r",
									"        const sub3 = await api.addSub(user.id,user3.id);\r",
									"        const sub4 = await api.addSub(user.id,user4.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user1.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user2.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub3, sub4,sub1, sub2, ]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(4);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/requests/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"requests",
								""
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок PENDING",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user.id,user1.id);\r",
									"        const sub2 = await api.addSub(user.id,user2.id);\r",
									"        const sub3 = await api.addSub(user.id,user3.id);\r",
									"        const sub4 = await api.addSub(user.id,user4.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user1.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user2.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub3, sub4]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(2);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									"pm.test(\"Статус подписок должем быть PENDING\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"PENDING\");\r",
									"    pm.expect(target[1].state).to.be.equal(\"PENDING\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/requests?filter=PENDING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"requests"
							],
							"query": [
								{
									"key": "filter",
									"value": "PENDING"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок REJECTED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user.id,user1.id);\r",
									"        const sub2 = await api.addSub(user.id,user2.id);\r",
									"        const sub3 = await api.addSub(user.id,user3.id);\r",
									"        const sub4 = await api.addSub(user.id,user4.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user1.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user2.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub2]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Статус подписок должем быть REJECTED\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"REJECTED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/requests?filter=REJECTED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"requests"
							],
							"query": [
								{
									"key": "filter",
									"value": "REJECTED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок APPROVED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user.id,user1.id);\r",
									"        const sub2 = await api.addSub(user.id,user2.id);\r",
									"        const sub3 = await api.addSub(user.id,user3.id);\r",
									"        const sub4 = await api.addSub(user.id,user4.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user1.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user2.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub1]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									"pm.test(\"Статус подписок должем быть APPROVED\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"APPROVED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/requests?filter=APPROVED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"requests"
							],
							"query": [
								{
									"key": "filter",
									"value": "APPROVED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Followers",
			"item": [
				{
					"name": "Получение списка полного списка подписок",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user1.id,user.id);\r",
									"        const sub2 = await api.addSub(user2.id,user.id);\r",
									"        const sub3 = await api.addSub(user3.id,user.id);\r",
									"        const sub4 = await api.addSub(user4.id,user.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user.id, [sub1.id,sub3.id]);\r",
									"        const app2 = await api.rejectSub(user.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub4,sub1, sub3,sub2, ]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(4);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/followers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"followers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок PENDING",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"\r",
									"        const sub1 = await api.addSub(user1.id,user.id);\r",
									"        const sub2 = await api.addSub(user2.id,user.id);\r",
									"        const sub3 = await api.addSub(user3.id,user.id);\r",
									"        const sub4 = await api.addSub(user4.id,user.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub3,sub4]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(2);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Статус подписок должем быть PENDING\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"PENDING\");\r",
									"    pm.expect(target[1].state).to.be.equal(\"PENDING\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/followers?filter=PENDING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"followers"
							],
							"query": [
								{
									"key": "filter",
									"value": "PENDING"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок REJECTED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user1.id,user.id);\r",
									"        const sub2 = await api.addSub(user2.id,user.id);\r",
									"        const sub3 = await api.addSub(user3.id,user.id);\r",
									"        const sub4 = await api.addSub(user4.id,user.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub2]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"\r",
									"    pm.expect(target[0].id).equal(subs_source[0].id, 'Id пользователя должно соответствовать id пользователя с указанным идентификатором');\r",
									"});\r",
									"\r",
									"pm.test(\"Статус подписок должем быть REJECTED\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"REJECTED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/followers?filter=REJECTED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"followers"
							],
							"query": [
								{
									"key": "filter",
									"value": "REJECTED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка полного списка подписок APPROVED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        const user4 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const sub1 = await api.addSub(user1.id,user.id);\r",
									"        const sub2 = await api.addSub(user2.id,user.id);\r",
									"        const sub3 = await api.addSub(user3.id,user.id);\r",
									"        const sub4 = await api.addSub(user4.id,user.id);\r",
									"\r",
									"        const app1 = await api.approveSub(user.id, [sub1.id]);\r",
									"        const app2 = await api.rejectSub(user.id, [sub2.id]);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [sub1]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, state, friend\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('state');\r",
									"pm.expect(target[0]).to.have.property('friend');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(1);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].state).to.not.be.null;\r",
									"    pm.expect(target[0].friend).to.not.be.null;\r",
									"    pm.expect(target[0].friend.id).to.not.be.null;\r",
									"    pm.expect(target[0].friend.name).to.not.be.null;\r",
									"\r",
									"    pm.expect(target[0].id).equal(subs_source[0].id, 'Id пользователя должно соответствовать id пользователя с указанным идентификатором');\r",
									"});\r",
									"\r",
									"pm.test(\"Статус подписок должем быть APPROVED\", function() {\r",
									"    pm.expect(target[0].state).to.be.equal(\"APPROVED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friendships/followers?filter=APPROVED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friendships",
								"followers"
							],
							"query": [
								{
									"key": "filter",
									"value": "APPROVED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Друзья",
			"item": [
				{
					"name": "Получение друзей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        let user1 = await api.addUser(rnd.getUser());\r",
									"        user1 = await api.changeSubsMode(user1.id, true);\r",
									"        let user2 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.changeSubsMode(user2.id, true);\r",
									"        let user3 = await api.addUser(rnd.getUser());\r",
									"        user3 = await api.changeSubsMode(user3.id, true);\r",
									"\r",
									"        const sub1 = await api.addSub(user.id,user1.id);\r",
									"        const sub2 = await api.addSub(user.id,user2.id);\r",
									"        const sub3 = await api.addSub(user.id,user3.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"response\", [user1,user2,user3]);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const subs_source = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Запрос должен содержать поля: id, email,name\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('email');\r",
									"pm.expect(target[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(3);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[0].name).to.not.be.null;\r",
									"    pm.expect(target[0].email).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friends"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий опубликованных друзьями",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        uc = await api.changeSubsMode(user2.id, true);\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        uc = await api.changeSubsMode(user3.id, true);\r",
									"\r",
									"        const sub1 = await api.addSub(user1.id,user2.id);\r",
									"        const sub2 = await api.addSub(user1.id,user3.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user2.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = true\r",
									"        let event2 = await api.addEvent(user3.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user3.id);\r",
									"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, user2.id);\r",
									"        const requestToJoin3 = await api.publishParticipationRequest(event2.id, user1.id);\r",
									"\r",
									"        r1 = await api.acceptParticipationRequest(event1.id,user2.id,requestToJoin1.id);\r",
									"        r2 = await api.acceptParticipationRequest(event2.id,user3.id,requestToJoin3.id);\r",
									"        r3 = await api.acceptParticipationRequest(event2.id,user3.id,requestToJoin2.id);\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        pm.collectionVariables.set(\"response1\", event1);\r",
									"        pm.collectionVariables.set(\"response2\", event2);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response1');\r",
									"const source2 = pm.collectionVariables.get('response2');\r",
									"const target = pm.response.json();\r",
									"let founded;\r",
									"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"     pm.expect(target[0]).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate','confirmedRequests','initiator','views');\r",
									"     pm.expect(target[1]).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate','confirmedRequests','initiator','views');\r",
									"});\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(2);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[1].id).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friends/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friends",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение события в которых участвуют друзей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        user = await api.changeSubsMode(user2.id, true);\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        user = await api.changeSubsMode(user3.id, true);\r",
									"        const sub1 = await api.addSub(user1.id,user2.id);\r",
									"        const sub2 = await api.addSub(user1.id,user3.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = false\r",
									"        let event1 = await api.addEvent(user3.id, eventBody1);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = false\r",
									"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user2.id);\r",
									"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, user3.id);\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        pm.collectionVariables.set(\"response1\", event1);\r",
									"        pm.collectionVariables.set(\"response2\", event2);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response1');\r",
									"const source2 = pm.collectionVariables.get('response2');\r",
									"const target = pm.response.json();\r",
									"let founded;\r",
									"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"     pm.expect(target[0]).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate','confirmedRequests','initiator','views');\r",
									"     pm.expect(target[1]).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate','confirmedRequests','initiator','views');\r",
									"});\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).to.be.equal(2);\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[1].id).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/friends/share",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"friends",
								"share"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async changeSubsMode(userId, mode, verbose=null) {",
					"        return this.patch(\"/users/\"+ userId + \"/subs/?auto=\"+mode, null, \"Ошибка при добавлении Запроса на дружбу: \", verbose);",
					"    }",
					"",
					"    async hideEvent(userId, ids, verbose=null) {",
					"        return this.patch(\"/users/\"+ userId + \"/requests/hide/?ids=\"+ids,null, \"Ошибка при добавлении Запроса на дружбу: \", verbose)",
					"    }",
					"",
					"    async addSub(userId,friendId, verbose=null) {",
					"        return this.post(\"/users/\"+ userId + \"/friendships/\"+friendId, null, \"Ошибка при добавлении Запроса на дружбу: \", verbose);",
					"    }",
					"",
					"    async approveSub(userId,ids, verbose=null) {",
					"        return this.patch(\"/users/\"+ userId + \"/friendships/approve?ids=\"+ids, null, \"Ошибка при подтверждении Запроса на дружбу: \", verbose);",
					"    }",
					"",
					"    async rejectSub(userId,ids, verbose=null) {",
					"        return this.patch(\"/users/\"+ userId + \"/friendships/reject?ids=\"+ids, null, \"Ошибка при отклонении Запроса на дружбу: \", verbose);",
					"    }",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "sub",
			"value": ""
		},
		{
			"key": "fid",
			"value": ""
		},
		{
			"key": "ids",
			"value": ""
		},
		{
			"key": "response1",
			"value": ""
		},
		{
			"key": "response2",
			"value": ""
		}
	]
}